module Media.Events exposing (allEvents, onPlaying, onPause, onVolumeChange, onTimeUpdate, onDurationChange, onEnded, onAbort, onSeeked, onSeeking, onLoadStart, onLoadedMetadata, onLoadedData, onLoadSuspend, onEmptied, onWaiting, onStalled, onProgress, onCanPlay, onCanPlayThrough, onError)

{-| ###Events

@docs allEvents, onPlaying, onPause, onVolumeChange, onTimeUpdate, onDurationChange, onEnded, onAbort, onSeeked, onSeeking, onLoadStart, onLoadedMetadata, onLoadedData, onLoadSuspend, onEmptied, onWaiting, onStalled, onProgress, onCanPlay, onCanPlayThrough, onError

-}

import Array exposing (fromList, get)
import Html exposing (Attribute)
import Html.Events exposing (custom)
import Internal.Decode exposing (..)
import Internal.Types exposing (State)
import Json.Decode exposing (Decoder, field, map)



-- on e decoder msg =
--     custom e (decoder { message = msg, preventDefault = True, stopPropagation = True })
-- on e msg =
--     custom e <| target tagger decodeState


{-| -}
allEvents : (State -> msg) -> List (Attribute msg)
allEvents tagger =
    [ onAbort tagger
    , onCanPlay tagger
    , onCanPlayThrough tagger
    , onDurationChange tagger
    , onEmptied tagger
    , onEnded tagger
    , onError tagger
    , onLoadStart tagger
    , onLoadSuspend tagger
    , onLoadedData tagger
    , onLoadedMetadata tagger
    , onPause tagger
    , onPlaying tagger
    , onProgress tagger
    , onSeeked tagger
    , onSeeking tagger
    , onStalled tagger
    , onTimeUpdate tagger
    , onWaiting tagger
    , onVolumeChange tagger
    ]


{-| Triggered when a player finishes seeking
-}
onSeeked : (State -> msg) -> Attribute msg
onSeeked tagger =
    custom "seeked" <| target tagger decodeState


{-| Triggered when a player begins seeking
-}
onSeeking : (State -> msg) -> Attribute msg
onSeeking tagger =
    custom "seeking" <| target tagger decodeState


{-| Triggered when playback begins
-}
onPlaying : (State -> msg) -> Html.Attribute msg
onPlaying tagger =
    custom "playing" <| target tagger decodeState


{-| Triggered when the media is paused
-}
onPause : (State -> msg) -> Html.Attribute msg
onPause tagger =
    custom "pause" <| target tagger decodeState


{-| Triggered when the currentTime of the player has changed.
\*\* NOTE: This doesn't occur custom a per frame basis. For performance reasons,
some browsers only trigger this event every so often, as infrequently as ever 250ms
in some cases. \*\*
-}
onTimeUpdate : (State -> msg) -> Attribute msg
onTimeUpdate tagger =
    custom "timeupdate" <| target tagger decodeState


{-| Triggered when the duration of a media file changes.
-}
onDurationChange : (State -> msg) -> Attribute msg
onDurationChange tagger =
    custom "durationchange" <| target tagger decodeState


{-| Triggered when playback completes
-}
onEnded : (State -> msg) -> Attribute msg
onEnded tagger =
    custom "ended" <| target tagger decodeState


{-| Triggered when the playback of media is aborted (such as restarting it)
-}
onAbort : (State -> msg) -> Attribute msg
onAbort tagger =
    custom "abort" <| target tagger decodeState


{-| Triggered when enough data has been loaded to begin playback of the media,
but not enough has yet been loaded to play all the way to the end without pausing to
buffer.
-}
onCanPlay : (State -> msg) -> Attribute msg
onCanPlay tagger =
    custom "canplay" <| target tagger decodeState


{-| Triggered when enough data has been loaded to playback the file to the end.
\*\*NOTE: This event does mean the whole media file has been buffered, only that enough
has been buffered that if the current download rate is continued, it will be finished
fast enough that the user will never have to wait.

\*\* NOTE: Also fired on a toggle of play/pause \*\*

-}
onCanPlayThrough : (State -> msg) -> Attribute msg
onCanPlayThrough tagger =
    custom "canplaythrough" <| target tagger decodeState


{-| Triggered when the media has become empty, such as if the load task
is invoked.
-}
onEmptied : (State -> msg) -> Attribute msg
onEmptied tagger =
    custom "emptied" <| target tagger decodeState


{-| Fired when the loading of the media stalls, that is, when the browser is trying
to fetch media data, but it is not forthcoming.
-}
onStalled : (State -> msg) -> Attribute msg
onStalled tagger =
    custom "stalled" <| target tagger decodeState


{-| Triggered when a media Error occurs.
\*\* NOTE: These are errors from the native playr of the browser, not errors
generated by this package. \*\*
-}
onError : (State -> msg) -> Attribute msg
onError tagger =
    custom "error" <| target tagger decodeState


{-| Triggered when the media's first frame or sample has finished loading.
-}
onLoadedData : (State -> msg) -> Attribute msg
onLoadedData tagger =
    custom "loadeddata" <| target tagger decodeState


{-| Triggered when the media's metadata has been completely loaded.
-}
onLoadedMetadata : (State -> msg) -> Attribute msg
onLoadedMetadata tagger =
    custom "loadedmetadata" <| target tagger decodeState


{-| Triggered when the loading of the media has begun.
-}
onLoadStart : (State -> msg) -> Attribute msg
onLoadStart tagger =
    custom "loadstart" <| target tagger decodeState


{-| Triggered when the loading of the media is suspended for any reason (including
because it has finished downloading
-}
onLoadSuspend : (State -> msg) -> Attribute msg
onLoadSuspend tagger =
    custom "suspend" <| target tagger decodeState


{-| Sent when a task is waiting custom the completion of another task (such as Play having
to wait until Seek is complete).
-}
onWaiting : (State -> msg) -> Attribute msg
onWaiting tagger =
    custom "waiting" <| target tagger decodeState


{-| Triggered periodically to provide updates on the download progress of
the media.
-}
onProgress : (State -> msg) -> Attribute msg
onProgress tagger =
    custom "progress" <| target tagger decodeState


{-| Triggered when volume changes, including muting or unmuting
-}
onVolumeChange : (State -> msg) -> Attribute msg
onVolumeChange tagger =
    custom "volumechange" <| target tagger decodeState


{-| NOTE: Only apply to a "track" element.

Triggered when a textTrack cue changes.

-}
onCueChange : (State -> msg) -> Attribute msg
onCueChange tagger =
    custom "cuechange" <| target tagger decodeState



-- target : (a -> msg) -> Decoder a -> Decoder msg
-- target tagger decoder =
--     map tagger <| field "target" decoder


target : (a -> msg) -> Decoder a -> Decoder { message : msg, stopPropagation : Bool, preventDefault : Bool }
target tagger decoder =
    map (\payload -> { message = tagger payload, stopPropagation = True, preventDefault = True }) <| field "target" decoder
